"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vundle
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Setting up vim-plug
call plug#begin('~/.dotfiles/nvim/plugged')

" -----------------------------------------------------------------
" Language agnostic plugins
" -----------------------------------------------------------------

" sensible defaults
Plug 'tpope/vim-sensible'
" Autocomplete
Plug 'Shougo/deoplete.nvim'
" Asynchronous maker and linter (needs linters to work)
Plug 'benekastah/neomake', { 'on': ['Neomake'] }
" Automatically closing stuff
Plug 'cohama/lexima.vim'
" Autoformat files
Plug 'Chiel92/vim-autoformat'
" listen to editorconfig files
Plug 'editorconfig/editorconfig-vim'
" CamelCase and snake_case motions
Plug 'bkad/CamelCaseMotion'
" File finding
Plug 'ctrlpvim/ctrlp.vim'

" -----------------------------------------------------------------
" Git related tools
" -----------------------------------------------------------------
" Fugitive
Plug 'tpope/vim-fugitive'
" Git log viewer
Plug 'gregsexton/gitv', { 'on': 'Gitv' }
" Git changes showed on line numbers
Plug 'airblade/vim-gitgutter'

" -----------------------------------------------------------------
" Interface improving
" -----------------------------------------------------------------
" Nerdtree file browser
Plug 'scrooloose/nerdtree'
" Better tab addon for nerdtree
Plug 'jistr/vim-nerdtree-tabs'
" Show git status in tree
Plug 'Xuyuanp/nerdtree-git-plugin'
" Status line
Plug 'bling/vim-airline'
" Highlight long lines
Plug 'whatyouhide/vim-lengthmatters'
" Color scheme
Plug 'altercation/vim-colors-solarized'
" Icons
Plug 'ryanoasis/vim-devicons'

" -----------------------------------------------------------------
" JS (ES6, React)
" -----------------------------------------------------------------

" JS syntax
Plug 'othree/yajs.vim'
" JS libs syntax (React, Angular)
Plug 'othree/javascript-libraries-syntax.vim'
" JSX syntax (needs vim-javascript for indentation)
Plug 'mxw/vim-jsx' | Plug 'pangloss/vim-javascript'
" JSON syntax
Plug 'sheerun/vim-json'

" -----------------------------------------------------------------
" HTML/CSS
" -----------------------------------------------------------------

" HTML5 syntax
Plug 'othree/html5.vim'
" SCSS syntax
Plug 'cakebaker/scss-syntax.vim'
" Sparkup, emmet alternative (<C-e> to expand expression)
Plug 'rstacruz/sparkup', { 'for': ['html', 'xhtml', 'eruby'] }
" CSS color highlighter
Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'sass', 'scss', 'less'] }


" Add plugins to &runtimepath
call plug#end()


" run sensible immediatly so we can overwrite some of it settings
runtime plugin/sensible.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set to auto read when a file is changed from the outside
set autoread

" maximum number of changes that can be undone
set undolevels=1000
" maximum number lines to save for undo on a buffer reload
set undoreload=10000

" enable the modeline
set modeline

" swap files (.swp) in a common location
" // means use the file's full path
set dir=~/.dotfiles/nvim/_swap//

" backup files (~) in a common location if possible
set backup
set backupdir=~/.dotfiles/nvim/_backup/,~/tmp,.

" turn on undo files, put them in a common location
set undofile
set undodir=~/.dotfiles/nvim/_undo/

" Use deoplete.
let g:deoplete#enable_at_startup = 1

" Use smartcase.
let g:deoplete#enable_smart_case = 1

" Use tab to autocomplete
inoremap <silent><expr><Tab>
		\ pumvisible() ? "\<C-n>" :
		\ deoplete#mappings#manual_complete()

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => Linter settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocheck files on save
autocmd! BufWritePost * Neomake

" javascript

let g:neomake_javascript_enabled_makers = ['eslint']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" load colorscheme
" silent so we don't get errors when vundle is installing
silent! colorscheme solarized
silent! so ~/.dotfiles/nvim/bundle/vim-colors-solarized/autoload/togglebg.vim

function! AutoSetSolarized()
    if strftime("%H") >= 5 && strftime("%H") <= 16
        set background=light
    else
        set background=dark
    endif
endfunction

if exists('neovim_dot_app') || has("gui_running")
    call AutoSetSolarized()

    " call autosetsolarized on saving a file so the colourscheme updates
    " currently disables because it makes the screen flicker
    "if has("autocmd")
    "    autocmd bufwritepost * call AutoSetSolarized()
    "endif
else
    set background=dark
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf-8
scriptencoding utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab
"
" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing, ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" don't display incomplete commands
set noshowcmd

" start scrolling before cursor at end
set scrolloff=3

" show line numbers
set relativenumber


" Always show current position
set ruler

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Don't highlight search results
set nohlsearch

" Makes search act like search in modern browsers
set incsearch

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" better split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" disable arrow keys so I learn to use hjkl
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" More logical Y (defaul was alias for yy)
nnoremap Y y$

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => Plugin specific settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin on
filetype indent on

"set grepprg=grep\ -nH\ $*
let g:tex_flavor = 'latex'
let g:vimtex_latexmk_build_dir = './tmp'
let g:vimtex_view_method = 'zathura'


autocmd Filetype yaml setlocal ts=4 sts=4 sw=4 et
autocmd Filetype python command! R :w !python
autocmd Filetype pascal command! R :w! /tmp/pascal.pas | !instantfpc /tmp/pascal.pas

"arduino
au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino

" Use the minimal NERDtree layout (no help etc. on top)
let g:NERDTreeMinimalUI=1

" Open NERDtree tab when in gui
let g:nerdtree_tabs_open_on_gui_startup=1
if exists('neovim_dot_app') || has("gui_running")
    let g:nerdtree_tabs_open_on_console_startup=1
endif

" Set the git icons
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  => Status/Lightline settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" don't show which mode we're in as the lightline shows it
set noshowmode

let g:airline_powerline_fonts = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>


" quick open new tab
map <LocalLeader>t :tabnew<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! GetRunningOS()
    if has("win32")
        return "win"
    endif
            return "mac"
        else
            return "linux"
        endif
    endif
endfunction

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction
